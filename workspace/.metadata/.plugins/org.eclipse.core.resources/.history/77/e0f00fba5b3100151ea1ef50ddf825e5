package com.klt;

import java.io.IOException;

import org.apache.http.client.methods.HttpRequestBase;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Handler;
import android.os.Message;
import android.os.Vibrator;
import android.support.v4.app.NotificationCompat;
import android.util.Log;

import com.google.android.gcm.GCMBaseIntentService;
import com.klt.activity.IntroActivity;
import com.klt.activity.OrderListActivity;
import com.klt.activity.SearchOrderActivity;
import com.klt.connectior.KLTAPIs_Order;
import com.klt.connectior.KLTHttpClient;
import com.klt.setting.Conf;
import com.klt.setting.Preference;

public class GCMIntentService extends GCMBaseIntentService {

	@Override
	public void onCreate() {
		super.onCreate();
		try {  
		    Class.forName("android.os.AsyncTask");  
		} catch (ClassNotFoundException e) {  
		}  
	}


	@Override
	  protected String[] getSenderIds(Context context) {
	     String[] ids = new String[1];
	     ids[0] = "495265280915";
	     return ids;
	  }
	 
	
	@Override
	protected void onError(Context arg0, String arg1) {
		
	}

	@Override
	protected void onMessage(Context context, Intent intent) {
		
		Log.i(TAG, "GCM 도착");
		
		if(intent.hasExtra("type")){
			String type = intent.getStringExtra("type");
			if(type.equals("notice")){
				Log.i(TAG, "GCM 공지사항");
				GCM_Notice(context, intent);
			} else if (type.equals("system")) {
				Log.i(TAG, "GCM 시스템");
				GCM_System(context, intent);
			} else if (type.equals("interest")) {
				Log.i(TAG, "GCM 관심지역");
				GCM_Interest(context, intent);
			} else if (type.equals("withdraw_req")) {
				Log.i(TAG, "GCM 출금요청");
				GCM_withdraw_req(context, intent);
			} else if (type.equals("withdraw_rsp")) {
				Log.i(TAG, "GCM 출금반응");
				GCM_withdraw_rsp(context, intent);
			} else if (type.equals("orderer")) {
				Log.i(TAG, "GCM 등록자");
				GCM_Orderer(context, intent);
			} else if (type.equals("orderee")) {
				Log.i(TAG, "GCM 작업자");
				GCM_Orderee(context, intent);
			}
			
		}
	}
	
private void NoticeShow(Context context, String title, String contents){
		
		// target Activity 설정
		Intent targetActivity = new Intent(this, IntroActivity.class);
		PendingIntent pIntent = PendingIntent.getActivity(getApplicationContext()
                   , 0
                   , targetActivity
                   , Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
		
		Notification notice = new NotificationCompat.Builder(this)
				.setContentTitle(title)
				.setContentText(contents)
				.setSmallIcon(R.drawable.app_icon1)
				.setAutoCancel(true).setContentIntent(pIntent).build();

		if(Preference.getBoolean(context, Conf.PREFERENCE_ALARM))
		{
			// 알림창
			NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
			manager.notify(1, notice);
		}
		
		if(Preference.getBoolean(context, Conf.PREFERENCE_ALARM_VIB))
		{
			// 진동 설정
			Vibrator vibe = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
			vibe.vibrate(500);
		}

		if(Preference.getBoolean(context, Conf.PREFERENCE_ALARM_SOUND))
		{
			// 알림음
			Uri ringtoneUri = RingtoneManager.getActualDefaultRingtoneUri(getApplicationContext(),RingtoneManager.TYPE_NOTIFICATION);
			Ringtone ringtone = RingtoneManager.getRingtone(getApplicationContext(), ringtoneUri);
			ringtone.play();	
		}
	}

	private void InterestNoticeShow(Context context, String title, String contents, Class classname) {

		HttpRequestBase req;
		try {
			Log.i(TAG, "contents: " + contents);
			req = KLTAPIs_Order.getOrderInfo_Address(contents);
			KLTHttpClient.getInstance().background(req, orderResult);
		} catch (IOException e) {
			e.printStackTrace();
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void GCM_Notice(Context context, Intent intent){
		String title = intent.getStringExtra("title");
		NoticeShow(context, "공지사항", title);
	}
	
	private void GCM_System(Context context, Intent intent){
		String contents = intent.getStringExtra("comment");
		NoticeShow(context, "관리자 메세지", contents);
	}
	
	private void GCM_Orderer(Context context, Intent intent){
		String contents = intent.getStringExtra("status");
		NoticeShow(context, "작업상태 변경", "작업 상태: " + contents);
	}
	
	private void GCM_Orderee(Context context, Intent intent){
		String contents = intent.getStringExtra("address");
		NoticeShow(context, "관심지역의 작업이 등록되었습니다", "지역: " + contents);
	}
	
	private void GCM_Interest(Context context, Intent intent){
		String contents = intent.getStringExtra("address");
		InterestNoticeShow(context, "관심지역의 작업이 등록되었습니다", contents, SearchOrderActivity.class);
	}
	
	private void GCM_withdraw_rsp(Context context, Intent intent){
		String price = intent.getStringExtra("price");
		NoticeShow(context, "출금 완료", "출금되었습니다. 금액: " + price + "만원");
	}
	
	private void GCM_withdraw_req(Context context, Intent intent){
		String username = intent.getStringExtra("username");
		String price = intent.getStringExtra("price");
		NoticeShow(context, username + " 님이 출금 요청", "금액: " + price + "만원");
	}
	
	
	static IntroActivity intro = null;
	public static void setIntroPtr(IntroActivity intro_){
		Log.i(TAG, "setIntroPtr()" );
		intro = intro_;
	}
	
	@Override
	protected void onRegistered(Context context, String reg_id) {
		Log.e("키를 등록합니다.(GCM INTENTSERVICE)", reg_id);
		Preference.putString(this, "gcmid", reg_id);
	}

	@Override
	protected void onUnregistered(Context arg0, String arg1) {
		Log.e("키를 제거합니다.(GCM INTENTSERVICE)", "제거되었습니다.");
	}
	
	Handler orderResult = new Handler(){
		@Override
		public void handleMessage(Message msg){
			if(msg.what == -1) {
				return;
			}
			else{
				int status;
				try {
					JSONObject json = new JSONObject(msg.getData().getString("res"));
					status = json.getInt("httpStatusCode");
					
					switch (status) {
					case 200:
						
						// target Activity 설정
						Intent targetActivity = new Intent(GCMIntentService.this, OrderListActivity.class);
						targetActivity.putExtra("data", msg.getData().getString("res"));
						PendingIntent pIntent = PendingIntent.getActivity(
								getApplicationContext(), 0, targetActivity,
								Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);

						Notification notice = new NotificationCompat.Builder(GCMIntentService.this)
								.setContentTitle("관심지역의 작업이 등록되었습니다").setContentText("자세히 보시려면 클릭해주세요.")
								.setSmallIcon(R.drawable.app_icon1).setAutoCancel(true)
								.setContentIntent(pIntent).build();

						if (Preference.getBoolean(GCMIntentService.this, Conf.PREFERENCE_ALARM)) {
							// 알림창
							NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
							manager.notify(1, notice);
						}

						if (Preference.getBoolean(GCMIntentService.this, Conf.PREFERENCE_ALARM_VIB)) {
							// 진동 설정
							Vibrator vibe = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
							vibe.vibrate(500);
						}

						if (Preference.getBoolean(GCMIntentService.this, Conf.PREFERENCE_ALARM_SOUND)) {
							// 알림음
							Uri ringtoneUri = RingtoneManager.getActualDefaultRingtoneUri(
									getApplicationContext(), RingtoneManager.TYPE_NOTIFICATION);
							Ringtone ringtone = RingtoneManager.getRingtone(
									getApplicationContext(), ringtoneUri);
							ringtone.play();
						}
						
						break;
					default:
						break;
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
				
			}
		}
	};
}
