package com.klt.activity;

import java.io.IOException;

import org.apache.http.client.methods.HttpRequestBase;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.klt.BaseActivity;
import com.klt.R;
import com.klt.connectior.KLTAPIs;
import com.klt.connectior.KLTHttpClient;
import com.klt.setting.Conf;
import com.klt.setting.Preference;

public class Setting2Activity extends BaseActivity {

	private EditText et_expiration;
	private Button btn_add_location;
	private CheckBox cb_alarm, cb_alarm_sound, cb_alarm_vib;
	private ListView li_location;
	
	private ArrayAdapter<String> m_Adapter;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		setContentView(R.layout.activity_setting);
		setTitle(getString(R.string.setting));
		super.onCreate(savedInstanceState);

		initResource();
		initEvent();
	}

	private void initResource() {
		et_expiration = (EditText) findViewById(R.id.setting_et_expiration_date);
		et_expiration.setText(Preference.getString(Setting2Activity.this, Conf.PREFERENCE_REGE_DATE));
		
		btn_add_location = (Button) findViewById(R.id.setting_btn_location_add);
		
		cb_alarm = (CheckBox) findViewById(R.id.setting_cb_alarm);
		cb_alarm_sound = (CheckBox) findViewById(R.id.setting_cb_alarm_sount);
		cb_alarm_vib = (CheckBox) findViewById(R.id.setting_cb_alarm_vidration);
		
		cb_alarm.setChecked(Preference.getBoolean(Setting2Activity.this, Conf.PREFERENCE_ALARM));
		cb_alarm_sound.setChecked(Preference.getBoolean(Setting2Activity.this, Conf.PREFERENCE_ALARM_SOUND));
		cb_alarm_vib.setChecked(Preference.getBoolean(Setting2Activity.this, Conf.PREFERENCE_ALARM_VIB));
		
		li_location = (ListView) findViewById(R.id.setting_location_list);
		
		m_Adapter = new ArrayAdapter<String>(getApplicationContext(), android.R.layout.simple_list_item_1);
		li_location.setAdapter(m_Adapter);
	}

	private void initEvent() {
		btn_add_location.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				showAddressDig();
			}
		});
		
		cb_alarm.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				if(isChecked){
					cb_alarm_sound.setEnabled(isChecked);
					cb_alarm_vib.setEnabled(isChecked);
				}
				else{
					cb_alarm_sound.setEnabled(isChecked);
					cb_alarm_vib.setEnabled(isChecked);
					
					Preference.putBoolean(Setting2Activity.this, Conf.PREFERENCE_ALARM_SOUND, isChecked);
					Preference.putBoolean(Setting2Activity.this, Conf.PREFERENCE_ALARM_VIB, isChecked);
				}
			}
		});

		cb_alarm_sound.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				Preference.putBoolean(Setting2Activity.this, Conf.PREFERENCE_ALARM_SOUND, isChecked);
			}
		});

		cb_alarm_vib.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				Preference.putBoolean(Setting2Activity.this, Conf.PREFERENCE_ALARM_VIB, isChecked);
			}
		});
		
		li_location.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				remove_location(position);
			}
		});
	}
	
	@Override
	protected void onResume() {
		super.onResume();
	}

	/** 관심지역 설정하기 */
	private void showAddressDig() {
		Intent intent = new Intent(Setting2Activity.this, AddressActivity.class);
		startActivity(intent);

		AddressActivity.setHandler(new Handler() {
			@Override
			public void handleMessage(Message msg) {
				Bundle bundle = msg.getData();
				String address = bundle.getString("Address");
				
				if(!address.equals(""))
					// 선택한 주소
					try {
						HttpRequestBase req = KLTAPIs.Login(id, pw);
						KLTHttpClient.getInstance().background(req, loginCallback);
					} catch (IOException e) {
						e.printStackTrace();
					}
					m_Adapter.add(address);
			}
		});
	}
	
	private void remove_location(final int index){
		AlertDialog.Builder alt_bld = new AlertDialog.Builder(this);
		alt_bld.setMessage(m_Adapter.getItem(index) + "을 삭제합니다. \n삭제하시겠습니까?")
				.setCancelable(false)
				.setPositiveButton("삭제",
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int id) {
								m_Adapter.remove(m_Adapter.getItem(index));
							}
						})
				.setNegativeButton("취소", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						dialog.cancel();
					}
				});
		AlertDialog alert = alt_bld.create();
		// Title for AlertDialog
		alert.setTitle("관심지역 삭제");
		alert.show();
	}
	
	private void initInterestList(){
		
	}
	
	/** 관심지역 관련 API 호출 */
	Handler interestCallback = new Handler(){
		@Override
		public void handleMessage(Message msg){
			if(msg.what == -1) {
				Toast.makeText(Setting2Activity.this, "연결 실패 \n잠시후에 다시 시도해주세요.", Toast.LENGTH_SHORT).show();
			}
			else{
				int status;
				try {
					Log.i(TAG, "data: " + msg.getData().getString("res"));
					
					JSONObject json = new JSONObject(msg.getData().getString("res"));
					status = json.getInt("httpStatusCode");
					
					switch (status) {
					case 200:
						m_Adapter = new ArrayAdapter<String>(getApplicationContext(), android.R.layout.simple_list_item_1);
						
						
						
						li_location.setAdapter(m_Adapter);
						break;
					default:
						break;
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
				
			}
		}
	};

}
