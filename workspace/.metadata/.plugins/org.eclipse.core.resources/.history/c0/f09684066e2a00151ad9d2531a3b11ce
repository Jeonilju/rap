package com.klt.activity;

import java.io.IOException;

import org.apache.http.client.methods.HttpRequestBase;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;

import com.google.android.gcm.GCMRegistrar;
import com.klt.BaseActivity;
import com.klt.R;
import com.klt.connectior.KLTAPIs_User;
import com.klt.connectior.KLTHttpClient;
import com.klt.setting.Conf;
import com.klt.setting.Preference;

public class MainActivity extends BaseActivity {

	private Button btnSignin,		// 로그인 OR 로그아웃 버튼
				btnSignup,			// 회원 가입 버튼
				btnAddOrder,		// 오더 등록 버튼
				btnSearchOrder,		// 오더 검색 버튼
				btnSearchPoint,		// 포인트 조회 버튼
				btnMyPage,			// 마이페이지 버튼
				btnKLT;				// 앱 소개버튼

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		setContentView(R.layout.activity_main);
		setTitle(getString(R.string.title_main));
		super.onCreate(savedInstanceState, this);
		
		registerGcm();
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		
		initResource();
		initEvent();
	}

	// 초기화
	private void initResource() {
		btnSignin = (Button) findViewById(R.id.main_btn_signin);
		btnSignup = (Button) findViewById(R.id.main_btn_signup);
		btnAddOrder = (Button) findViewById(R.id.main_btn_add_order);
		btnSearchOrder = (Button) findViewById(R.id.main_btn_search_order);
		btnSearchPoint = (Button) findViewById(R.id.main_btn_search_point);
		btnMyPage = (Button) findViewById(R.id.main_btn_mypage);
		btnKLT = (Button) findViewById(R.id.main_btn_intro);
		
		if(Preference.getBoolean(MainActivity.this, Conf.PREFERENCE_ISLOGIN)){
			// 자동 로그인일경우
			String id = Preference.getString(MainActivity.this, Conf.PREFERENCE_ID);
			String pw = Preference.getString(MainActivity.this, Conf.PREFERENCE_PW);
			
			try {
				HttpRequestBase req = KLTAPIs_User.Login(id, pw);
				KLTHttpClient.getInstance().background(req, loginCallback);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		else
		{
			// 자동로그인 아닐경우 or 비 로그인 상태
			btnSignin.setBackgroundDrawable(getResources().getDrawable(R.drawable.selector_btn_login));
			btnSignup.setVisibility(View.VISIBLE);
		}
	}

	// 이벤트 등록
	private void initEvent() {
		btnSignin.setOnClickListener(OnSignin);
		btnSignup.setOnClickListener(OnSignup);
		btnAddOrder.setOnClickListener(OnAddOrder);
		btnSearchOrder.setOnClickListener(OnSearchOrder);
		btnSearchPoint.setOnClickListener(OnSearchPoint);
		btnMyPage.setOnClickListener(OnMypage);
		btnKLT.setOnClickListener(OnKLTIntro);

		// btnMenu.setOnClickListener(OnMenu);
	}

	public void registerGcm() {
		Log.i(TAG,"intro) registerGcm1");
		GCMRegistrar.checkDevice(this);
		GCMRegistrar.checkManifest(this);
//		GCMRegistrar.register(this,  "495265280915");
		String myGCMID = GCMRegistrar.getRegistrationId(this);
		
		if (myGCMID.equals("")) {
			GCMRegistrar.register(this,  "495265280915");
			myGCMID = GCMRegistrar.getRegistrationId(this);
		} 
		
		Preference.putString(MainActivity.this, "gcmid", myGCMID);
		Log.i(TAG, "myGCMID: " + myGCMID);
	}
	
	// 로그인
	private OnClickListener OnSignin = new OnClickListener() {

		@Override
		public void onClick(View v) {
			
			if(Preference.getBoolean(MainActivity.this, Conf.PREFERENCE_ISLOGIN)){
				// 로그아웃
				Toast.makeText(MainActivity.this, "로그아웃", Toast.LENGTH_SHORT).show();
				Preference.putBoolean(MainActivity.this, Conf.PREFERENCE_ISLOGIN, false);
				ShowDig("로그아웃 되었습니다.");
				initResource();
			}
			else{
				// 로그인
				Intent intent = new Intent(MainActivity.this, SigninActivity.class);
				startActivity(intent);
			}
		}
	};

	// 회원가입
	private OnClickListener OnSignup = new OnClickListener() {

		@Override
		public void onClick(View v) {
			Intent intent = new Intent(MainActivity.this,
					SignupConditionActivity.class);
			startActivity(intent);
		}
	};

	// Order 등록
	private OnClickListener OnAddOrder = new OnClickListener() {

		@Override
		public void onClick(View v) {
			
			if(Preference.getBoolean(MainActivity.this, Conf.PREFERENCE_ISLOGIN)){
				// 로그인 상태
				Intent intent = new Intent(MainActivity.this, AddOrderActivity.class);
				startActivity(intent);
			}
			else{
				// 비로그인상태
				ShowDig("로그인 후 이용해주세요.");
			}
		}
	};

	// Order 검색
	private OnClickListener OnSearchOrder = new OnClickListener() {

		@Override
		public void onClick(View v) {
			Intent intent = new Intent(MainActivity.this,
					SearchOrderActivity.class);
			startActivity(intent);
		}
	};

	// 포인트 조회
	private OnClickListener OnSearchPoint = new OnClickListener() {

		@Override
		public void onClick(View v) {
			if(Preference.getBoolean(MainActivity.this, Conf.PREFERENCE_ISLOGIN)){
				// 로그인 상태
				Intent intent = new Intent(MainActivity.this, PointActivity.class);
				startActivity(intent);
			}
			else{
				// 비로그인상태
				ShowDig("로그인 후 이용해주세요.");
			}
		}
	};

	// 마이 페이지
	private OnClickListener OnMypage = new OnClickListener() {

		@Override
		public void onClick(View v) {
			if(Preference.getBoolean(MainActivity.this, Conf.PREFERENCE_ISLOGIN)){
				// 로그인 상태
				Intent intent = new Intent(MainActivity.this, MyPageSelectActivity.class);
				startActivity(intent);
			}
			else{
				// 비로그인상태
				ShowDig("로그인 후 이용해주세요.");
			}
		}
	};

	// KLT 소개 페이지
	private OnClickListener OnKLTIntro = new OnClickListener() {

		@Override
		public void onClick(View v) {
			Intent intent = new Intent(MainActivity.this,
					IntroductionActivity.class);
			startActivity(intent);
		}
	};
	
	private void ShowDig(String message){
		AlertDialog.Builder alt_bld = new AlertDialog.Builder(MainActivity.this);
		alt_bld.setMessage(message)
				.setCancelable(false)
				.setPositiveButton(getString(R.string.close),
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int id) {
								
							}
						});

		AlertDialog alert = alt_bld.create();
		alert.setTitle("");
		alert.show();
	}
	
	Handler loginCallback = new Handler(){
		@Override
		public void handleMessage(Message msg){
			if(msg.what == -1) {
				Toast.makeText(MainActivity.this, "연결 실패 \n잠시후에 다시 시도해주세요.", Toast.LENGTH_SHORT).show();
			}
			else{
				int status;
				try {
					JSONObject json = new JSONObject(msg.getData().getString("res"));
					status = json.getInt("httpStatusCode");
					
					switch (status) {
					case 200:
						btnSignin.setBackgroundDrawable(getResources().getDrawable(R.drawable.logout));
						btnSignup.setVisibility(View.INVISIBLE);
						break;
					default:
						btnSignin.setBackgroundDrawable(getResources().getDrawable(R.drawable.selector_btn_login));
						btnSignup.setVisibility(View.VISIBLE);
						break;
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
				
			}
		}
	};
}
