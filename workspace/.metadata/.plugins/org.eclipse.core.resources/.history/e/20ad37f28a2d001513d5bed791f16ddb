package com.klt.view;

import java.sql.Date;
import java.util.ArrayList;

import org.apache.http.client.methods.HttpRequestBase;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnDismissListener;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.klt.R;
import com.klt.connectior.KLTAPIs_Order;
import com.klt.connectior.KLTHttpClient;
import com.klt.data.OrderInfo;
import com.klt.setting.Conf;
import com.klt.setting.Preference;

public class OrderListAdapter extends BaseAdapter {

	private static final String TAG = "OrderListAdapter";
	
	private Context mContext = null;
	
	private boolean isSelectAble = false;
	
	// 문자열을 보관 할 ArrayList
    private ArrayList<OrderInfo>   contentList;
    
    // 생성자
    public OrderListAdapter(Context context, ArrayList<OrderInfo> list, boolean isSelectAble) {
    	mContext = context;
        contentList = list;
        this.isSelectAble = isSelectAble;
    }
    
    public void setList(ArrayList<OrderInfo> list){
    	contentList = list;
    	this.notifyDataSetChanged();
    }
 
    // 현재 아이템의 수를 리턴
    @Override
    public int getCount() {
        return contentList.size();
    }
 
    // 현재 아이템의 오브젝트를 리턴, Object를 상황에 맞게 변경하거나 리턴받은 오브젝트를 캐스팅해서 사용
    @Override
    public Object getItem(int position) {
        return contentList.get(position);
    }
 
    // 아이템 position의 ID 값 리턴
    @Override
    public long getItemId(int position) {
        return position;
    }
 
    // 출력 될 아이템 관리
    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {
        final int pos = position;
        
        // 리스트가 길어지면서 현재 화면에 보이지 않는 아이템은 converView가 null인 상태로 들어 옴
        if ( convertView == null ) {
            // view가 null일 경우 커스텀 레이아웃을 얻어 옴
            LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = inflater.inflate(R.layout.adapter_order_list, parent, false);
             
            // TextView에 현재 position의 문자열 추가
            TextView text = (TextView) convertView.findViewById(R.id.orderlist_address);
            text.setText(contentList.get(position).getAddress());
            
            TextView text2 = (TextView) convertView.findViewById(R.id.orderlist_height);
            text2.setText(contentList.get(position).getHeight() + " 높이(층)\t");
            
            TextView text3 = (TextView) convertView.findViewById(R.id.orderlist_pay);
            text3.setText(contentList.get(position).getPay() + " 작업 비용");
            
            // 버튼을 터치 했을 때 이벤트 발생
            Button btn = (Button) convertView.findViewById(R.id.orderlist_btn_req);
            String orderStateStr = "";
            switch (contentList.get(position).getState()) {
			case 0:
				//orderStateStr = "작업신청";
				btn.setBackgroundResource(R.drawable.order_status_ready);
				break;
			case 1:
				// 작업중 (취소 가능)
				btn.setBackgroundResource(R.drawable.order_status_running);
				break;
			case 2:
				// 작업중 (취소 불가능)
				btn.setBackgroundResource(R.drawable.order_status_running);
				break;
			case 3:
				// 작업 완료
				btn.setBackgroundResource(R.drawable.order_status_end);
				break;
			default:
				orderStateStr = "알수없음";
				break;
			}

            btn.setText(orderStateStr);
            
            if(isSelectAble){
            	// Order 검색 결과창에서 이벤트
            	if(!Preference.getBoolean(mContext, Conf.PREFERENCE_ISLOGIN)){
            		
            		btn.setOnClickListener(new OnClickListener() {
						
						@Override
						public void onClick(View v) {
							ShowDig("로그인후 이용해주세요");
						}
					});
            	}
            	
            	btn.setOnClickListener(new OnClickListener() {
                    
                    @Override
                    public void onClick(View v) {
                    	// TODO 오더 상태 변경
                    	switch (contentList.get(position).getState()) {
            			case 0:
            				// "작업신청"
            				OrderReqDig(pos);
            				break;
            			case 1:
            				//orderStateStr = "작업중";
            				OrderCompliteDig(pos);
            				break;
            			case 2:
            				//orderStateStr = "작업완료";
            				ShowDig("작업완료된 Order입니다.");
            				break;
            				
            			default:
            				break;
            			}
                    }
                });
            }
            else{
            	// 마이페이지에서의 Order 리스트
            }
             
            // 리스트 아이템을 터치 했을 때 이벤트 발생
            convertView.setOnClickListener(new OnClickListener() {
                 
                @Override
                public void onClick(View v) {
                	OrderDetail(pos);
                }
            });
        }
         
        return convertView;
    }
    
    /** 작업 완료 */
    private void OrderCompliteDig(final int index) {
		
		String message = "작업을 완료하시겠습니까?";
		
		AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(mContext);
		dialogBuilder.setTitle("작업 완료");
		dialogBuilder.setMessage(message).setCancelable(false)
				.setPositiveButton("완료", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						try {
							HttpRequestBase req = KLTAPIs_Order.changeOrderStatus(contentList.get(index).getId()
									, Preference.getPreferenceString(mContext, Conf.PREFERENCE_ID, "false")
									, Preference.getPreferenceString(mContext, Conf.PREFERENCE_PW, "false")
									, 2);
							
							KLTHttpClient.getInstance().background(req, orderCompliteReq);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}	
				})
				.setNegativeButton("취소", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						dialog.cancel();
					}
				});
		AlertDialog alert = dialogBuilder.create();
		alert.show();
	}
    
    /** 작업 조회 */
    private void OrderDetail(final int index){
    	
    	Date date = Conf.getDateTime((long)contentList.get(index).getDate());
    	
    	String message = "작업 세부내용입니다." + "\n\n"
				+ "지역: " + contentList.get(index).getAddress() + "\n"
				+ "높이: " + contentList.get(index).getHeight() + "\n"
				+ "무게: " + contentList.get(index).getTon() + "\n"
				+ "날짜: " + date.getYear() + "년 " + date.getMonth() + "월 " + date.getDate() + "일" + "\n"
				+ "가격: " + contentList.get(index).getPay() + " 만원";
		
		AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(mContext);
		dialogBuilder.setTitle("작업 조회");
		dialogBuilder.setMessage(message).setCancelable(false)
				.setNegativeButton("확인", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						dialog.cancel();
					}
				});
		AlertDialog alert = dialogBuilder.create();
		alert.show();
    }
    
    /** 작업 신청 */
	private void OrderReqDig(final int index) {
		
		int admin_commission = Integer.parseInt(contentList.get(index).admin_commission);
		int master_commission = Integer.parseInt(contentList.get(index).master_commission);
		int orderer_commission = Integer.parseInt(contentList.get(index).orderer_commission);
		
		Log.i(TAG, "가격: " + admin_commission);
		Log.i(TAG, "가격: " + master_commission);
		Log.i(TAG, "가격: " + orderer_commission);
		Log.i(TAG, "가격: " + contentList.get(index).getPay());
		float fee = ((admin_commission+ master_commission + orderer_commission) * 100) / contentList.get(index).getPay();
		
		String message = "작업을 신청하시겠습니까?" + "\n\n"
				+ "지역: " + contentList.get(index).getAddress() + "\n"
				+ "높이: " + contentList.get(index).getHeight() + "\n"
				+ "무게: " + contentList.get(index).getTon() + "\n"
				+ "날짜: " + contentList.get(index).getDate() + "\n"
				+ "가격: " + contentList.get(index).getPay() + " 만원\n\n"
				+ "( 이 작업의 수수료는 " + fee + "% 입니다.)";
		
		AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(mContext);
		dialogBuilder.setTitle("작업 신청");
		dialogBuilder.setMessage(message).setCancelable(false)
				.setPositiveButton("신청", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						
						
						try {
							Log.i("Order", "order id: " + contentList.get(index).getId());
							HttpRequestBase req = KLTAPIs_Order.OrderRequest(contentList.get(index).getId());
							KLTHttpClient.getInstance().background(req, orderReq);
							
						} catch (Exception e) {
							e.printStackTrace();
						}
					}	
				})
				.setNegativeButton("취소", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						dialog.cancel();
					}
				});
		AlertDialog alert = dialogBuilder.create();
		alert.show();
	}
	
	Handler orderCompliteReq = new Handler(){
		@Override
		public void handleMessage(Message msg){
			if(msg.what == -1) {
				Toast.makeText(mContext, "연결 실패 \n잠시후에 다시 시도해주세요.", Toast.LENGTH_SHORT).show();
			}
			else{
				int status;
				try {
					JSONObject json = new JSONObject(msg.getData().getString("res"));
					status = json.getInt("httpStatusCode");
					switch (status) {
					case 200:
						// TODO 성공
						CompliteOrderReqDig("작업이 완료되었습니다.");
						break;
					default:
						Toast.makeText(mContext, "알수없는 요청입니다. \n" + msg.getData().getString("res"), Toast.LENGTH_SHORT).show();
						break;
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
				
			}
		}
	};
	
	Handler orderReq = new Handler(){
		@Override
		public void handleMessage(Message msg){
			if(msg.what == -1) {
				Toast.makeText(mContext, "연결 실패 \n잠시후에 다시 시도해주세요.", Toast.LENGTH_SHORT).show();
			}
			else{
				int status;
				try {
					JSONObject json = new JSONObject(msg.getData().getString("res"));
					status = json.getInt("httpStatusCode");
					Toast.makeText(mContext, "상태: " + status, Toast.LENGTH_SHORT).show();
					switch (status) {
					case 200:
						// TODO 성공
						CompliteOrderReqDig("신청이 완료되었습니다.");
						break;
					case 400:
						// 인자 오류
						break;
					case 401:
						// 페스워드 오류
						break;
					case 403:
						// 오더 관련자가 아닌경우
						break;
					case 404:
						// 오더가 존재하지 않음
						ShowDig("로그인 후에 이용해주세요");
						break;
					case 409:
						// 변경 불가능한 상태
						break;
					default:
						Toast.makeText(mContext, "알수없는 요청입니다. \n" + msg.getData().getString("res"), Toast.LENGTH_SHORT).show();
						break;
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
				
			}
		}
	};
	
	private void CompliteOrderReqDig(String message){
		AlertDialog.Builder alt_bld = new AlertDialog.Builder(mContext);
		alt_bld.setMessage(message)
				.setCancelable(false)
				.setPositiveButton(mContext.getString(R.string.close),
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int id) {
								
							}
						});

		AlertDialog alert = alt_bld.create();
		alert.setOnDismissListener(new OnDismissListener() {
			
			@Override
			public void onDismiss(DialogInterface dialog) {
				((Activity)mContext).finish();
			}
		});
		alert.setTitle("");
		alert.show();
	}
	
	private void ShowDig(String message){
		AlertDialog.Builder alt_bld = new AlertDialog.Builder(mContext);
		alt_bld.setMessage(message)
				.setCancelable(false)
				.setPositiveButton(mContext.getString(R.string.close),
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int id) {
								
							}
						});

		AlertDialog alert = alt_bld.create();
		alert.setTitle("");
		alert.show();
	}
}
