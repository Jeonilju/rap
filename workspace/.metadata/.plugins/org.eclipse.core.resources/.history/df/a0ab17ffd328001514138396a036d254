package com.klt.connectior;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;

import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.entity.StringEntity;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.json.JSONException;
import org.json.JSONObject;

import android.util.Log;

import com.google.gson.Gson;
import com.klt.data.OrderInfo;
import com.klt.data.SearchInfo;
import com.klt.data.UserInfo;
import com.klt.setting.SimpleSHA1;

public class KLTAPIs {

	private static final String TAG = "KLTAPIs";
	
	/** 가격 가져오기 */
	public static HttpRequestBase getPay(float ton, int floor, String main_address)
			throws UnsupportedEncodingException {
		//String url = URLEncoder.encode(main_address);
		Log.e("URL: ", KLTHttpClient.getBaseURL() + "/price/calc/");
		
		OrderInfo info = new OrderInfo();
		info.ton = ton;
		info.floor = floor;
		info.address = main_address;
		
		String json = new Gson().toJson(info);

		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/price/calc/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, HTTP.UTF_8);
		httpPost.setEntity(entity);
		
		//HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/order/pay/?floor=" + floor+"&ton="+ ton + "&main_address=" + url);
		
		return httpPost;
	}
	
	/** 오더 등록 */
	public static HttpRequestBase OrderRegister(String username, String password,
			String date, float ton, int floor, String phone, String address,
			String detail_address, int price)
			throws UnsupportedEncodingException {

		OrderInfo info = new OrderInfo();
		info.username = username;
		info.password = password;
		info.date = date;
		info.ton = ton;
		info.floor = floor;
		info.phone = phone;
		info.address = address + " " + detail_address;
		info.main_address = address;
		info.detail_address = detail_address;
		info.price = price;
		
		info.oderer_commision = "temp";
		info.admin_commission = "temp";
		info.master_commission = "temp";
		
		String json = new Gson().toJson(info);

		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/order/write/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, HTTP.UTF_8);
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/** MyPage 배차등록내역 */
	public static HttpRequestBase getMypageOrder(int startIndex, int endIndex)
			throws UnsupportedEncodingException {
		HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/mypage/orderer/" + startIndex + "/" + endIndex + "/");
		return httpGet;
	}
	
	/** MyPage 배차선택내역 */
	public static HttpRequestBase getMypageSelect(int startIndex, int endIndex)
			throws UnsupportedEncodingException {
		HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/mypage/orderee/" + startIndex + "/" + endIndex + "/");
		return httpGet;
	}
	
	/** Point 사용 내역 */
	public static HttpRequestBase getUesingPoint(String username, String password)
			throws UnsupportedEncodingException {
		
		UserInfo info = new UserInfo();
		info.username = username;
		info.password = password;
		
		String json = new Gson().toJson(info);
		Log.i(TAG, "json: " + json);
		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/point/" + username+ "/using/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/**  포인트 충전 내역 */
	public static HttpRequestBase getPointChargeList(String username, String password) throws UnsupportedEncodingException{
		String url_str = KLTHttpClient.getBaseURL() + "/point/" + username +"/charge/";
		
		UserInfo info = new UserInfo();
		info.username = username;
		info.password = password;
		
		String json = new Gson().toJson(info);
		HttpPost httpPost = new HttpPost(url_str);
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/** 오더 신청 */
	public static HttpRequestBase OrderRequest(int index, String username, String password)
			throws UnsupportedEncodingException {
		
		UserInfo info = new UserInfo();
		info.username = username;
		info.orderee = username;
		info.password = password;
		
		String json = new Gson().toJson(info);

		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/order/" + index + "/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/**  오더 가져오기 */
	public static HttpRequestBase getOrderInfo() throws UnsupportedEncodingException {
		SearchInfo info = new SearchInfo();
		info.total = "total";
		
		String json = new Gson().toJson(info);

		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/order/search/" + 1 + "/" + 51  + "/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);
		
		return httpPost;
	}
	
	/**  오더 가져오기 */
	public static HttpRequestBase getOrderInfo(int index) {
		HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/orders/" + index + "/");
		return httpGet;
	}
	
	/**  오더 지역 지역으로 검색  
	 * @throws JSONException */
	public static HttpRequestBase getOrderInfo_Address(String address) throws UnsupportedEncodingException, JSONException{
		SearchInfo info = new SearchInfo();
		info.address = address;
		
		JSONObject obj = new JSONObject();
		obj.put("address", address);
		
		String json = obj.toString();//new Gson().toJson(info);

		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/order/search/" + 1 + "/" + 51  + "/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);
		
		return httpPost;
	}
	
	/**  오더 지역 높이로 검색   
	 * @throws JSONException */
	public static HttpRequestBase getOrderInfo_Floor(int max, int min) throws UnsupportedEncodingException, JSONException{
		SearchInfo info = new SearchInfo();
		info.floor = "floor";
		info.max = max;
		info.min = min;
		
		JSONObject floor = new JSONObject();
		floor.put("max", max);
		floor.put("min", min);
		
		JSONObject obj = new JSONObject();
		obj.put("floor", floor);
		
		String json = obj.toString();//new Gson().toJson(info);
		Log.i(TAG, "Json: " + json);
		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/order/search/" + 1 + "/" + 51  + "/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);
		
		return httpPost;
	}
	
	/**  오더 미해결 검색 
	 * @throws UnsupportedEncodingException */
	public static HttpRequestBase getOrderInfo_Unsolved() throws UnsupportedEncodingException{
		SearchInfo info = new SearchInfo();
		info.unsolved = "unsolved";
		
		String json = new Gson().toJson(info);

		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/order/search/" + 1 + "/" + 51  + "/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);
		
		return httpPost;
	}
	
	/**  오더 지역 조건 2개로 검색  */
	public static HttpRequestBase getOrderInfo_Total(String main_address, int max, int min) throws UnsupportedEncodingException, JSONException{
		SearchInfo info = new SearchInfo();
		info.address = main_address;
		info.floor = "floor";
		info.max = max;
		info.min = min;
		
		JSONObject floor = new JSONObject();
		floor.put("max", max);
		floor.put("min", min);
		
		JSONObject obj = new JSONObject();
		obj.put("floor", floor);
		obj.put("address", main_address);
		
		String json = obj.toString();//new Gson().toJson(info);

		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/order/search/" + 1 + "/" + 51  + "/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);
		
		return httpPost;
	}
	
	/** 오더 작업 상태 변경 
	 * @param status 0: 배차 대기중, 1: 작업중, 2: 배차 완료 
	 *  */
	public static HttpRequestBase changeOrderStatus(int index, String username, String password, int status) throws UnsupportedEncodingException{
		UserInfo info = new UserInfo();
		info.username = username;
		info.password = password;
		info.status = status;
		
		String json = new Gson().toJson(info);

		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/order/" + index + "/status/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/** 유저 정보 수정 */
	public static HttpRequestBase updateUserInfo(String name, String username, String password, String car_num
			, String address, String office) throws UnsupportedEncodingException{
		String url = URLEncoder.encode(KLTHttpClient.getBaseURL() + "/user/" + username + "/");
		HttpPut httpPut = new HttpPut(url);
		
		ArrayList<NameValuePair> pairs = new ArrayList<NameValuePair>();
		
		if(!name.equals(""))
			pairs.add(new BasicNameValuePair("name", name));
		if(!username.equals(""))
			pairs.add(new BasicNameValuePair("username", username));
		if(!password.equals(""))
			pairs.add(new BasicNameValuePair("password", password));
		if(!car_num.equals(""))
			pairs.add(new BasicNameValuePair("car_num", car_num));
		if(!address.equals(""))
			pairs.add(new BasicNameValuePair("address", address));
		if(!office.equals(""))
			pairs.add(new BasicNameValuePair("office", office));
		
		httpPut.setEntity(new UrlEncodedFormEntity(pairs));
		
		return httpPut;
	}
	
	/** 회원 탈퇴 */
	public static HttpRequestBase deleteUser(String password) {
		HttpDelete httpDelete = new HttpDelete(KLTHttpClient.getBaseURL() + "/user/");
		httpDelete.getParams().setParameter("password", password);
		httpDelete.setHeader("Content-Type", "application/x-www-form-urlencoded");
		
		return httpDelete;
	}
	
	/**  포인트 조회 */
	public static HttpRequestBase getMyPoint(String username, String password) throws UnsupportedEncodingException{
		String url_str = KLTHttpClient.getBaseURL() + "/point/" + username +"/info/";
		
		UserInfo info = new UserInfo();
		info.username = username;
		info.password = password;
		
		String json = new Gson().toJson(info);
		
		Log.e(TAG, "ID: " + username + ", PW: " + password);
		
		HttpPost httpPost = new HttpPost(url_str);
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/** 포인트 충전  */
	public static HttpRequestBase chargingPoint(int money, String username, String password) throws UnsupportedEncodingException, NoSuchAlgorithmException{
		UserInfo info = new UserInfo();
		info.username = username;
		info.password = password;
		info.money = money;
		info.encrypt_key = SimpleSHA1.SHA1("sadari" + username);
		
		String json = new Gson().toJson(info);
		
		Log.e(TAG, "ID2: " + username + ", PW: " + password);
		
		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/point/" + username + "/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/** 포인트 출금  */
	public static HttpRequestBase PointWithdraw(int money, String username, String password) throws UnsupportedEncodingException, NoSuchAlgorithmException{
		UserInfo info = new UserInfo();
		info.username = username;
		info.password = password;
		info.money = money;
		info.encrypt_key = SimpleSHA1.SHA1("sadari" + username);

		String json = new Gson().toJson(info);
		Log.i(TAG, "json: " + json);
		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/point/" + username + "/withdraw/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////
	////////////															/////////////
	////////////						사용자								/////////////
	////////////															/////////////
	/////////////////////////////////////////////////////////////////////////////////////
	
	/** 로그인 */
	public static HttpRequestBase Login(String username, String password) throws UnsupportedEncodingException {

		UserInfo aa = new UserInfo();
		aa.password = password;
		aa.username = username;
		
		String json = new Gson().toJson(aa);

		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/user/login/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, "utf-8");
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	// TODO 완전하지 않음
	/** 회원가입 */
	public static HttpRequestBase SignUp(String name, String username, String password, String car_num, String telephone_num
			, String main_address , String detail_address, String office, int office_location_id, String uuid, String bank, String banking, int code) throws UnsupportedEncodingException {

		UserInfo userObj = new UserInfo();
		userObj.name = name;
		userObj.username = username;
		userObj.password = password;
		userObj.uuid = uuid;
		userObj.car_num = car_num;
		userObj.main_address = main_address;
		userObj.detail_address = detail_address;
		userObj.office = office;
		userObj.office_location_id = office_location_id;
		userObj.interest_address = "";	// 현재 회원가입할 땐 체크하지 않음
		userObj.bank = bank;
		userObj.banking = banking;
		userObj.banking = banking;
		userObj.code = code;
		userObj.telephone_num = telephone_num;
		
		String json = new Gson().toJson(userObj);
		Log.i(TAG, "json: " + json);
		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/user/join/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, HTTP.UTF_8);
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/** 유저 존재 유무 가져오기 
	 * @throws UnsupportedEncodingException */
	public static HttpRequestBase getUserExist(String username) throws UnsupportedEncodingException{
		
		UserInfo userObj = new UserInfo();
		userObj.username = username;
		
		String json = new Gson().toJson(userObj);
		Log.i(TAG, "json: " + json);
		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/user/exist/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, HTTP.UTF_8);
		httpPost.setEntity(entity);
		
		return httpPost;
	}
	
//	/** 유저 정보 가져오기 */
//	public static HttpRequestBase getUserInfo(String username){
//		HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/user/" + username + "/");
//		return httpGet;
//	}
	
	/////////////////////////////////////////////////////////////////////////////////////
	////////////															/////////////
	////////////						공지 사항								/////////////
	////////////															/////////////
	/////////////////////////////////////////////////////////////////////////////////////
	
	/** 모든 공지사항 조회 */
	public static HttpRequestBase getNotificationAll(){
		HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/notifications/1/51/");
		return httpGet;
	}
	
	/** 특정 공지사항 조회 */
	public static HttpRequestBase getNotification(int index){
		HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/notifications/" + index + "/");
		return httpGet;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////
	////////////															/////////////
	////////////							소재지							/////////////
	////////////															/////////////
	/////////////////////////////////////////////////////////////////////////////////////
	
	/** 특정 공지사항 조회 */
	public static HttpRequestBase getOfficeList(){
		HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/offices/");
		return httpGet;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////
	////////////															/////////////
	////////////							추천인 코드							/////////////
	////////////															/////////////
	/////////////////////////////////////////////////////////////////////////////////////
	
	/** 특정 공지사항 조회 */
	public static HttpRequestBase getAdminCodeList(){
		HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/admin_codes/");
		return httpGet;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////
	////////////															/////////////
	////////////						테스트								/////////////
	////////////															/////////////
	/////////////////////////////////////////////////////////////////////////////////////
	/**  TEST PUSH */
	public static HttpRequestBase testPush(){
		HttpGet httpGet = new HttpGet(KLTHttpClient.getBaseURL() + "/push/");
		return httpGet;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////
	////////////															/////////////
	////////////						관심 지역 설정							/////////////
	////////////															/////////////
	/////////////////////////////////////////////////////////////////////////////////////
	/**
	 * 관심지역 등록
	 * @throws UnsupportedEncodingException 
	 * */
	public static HttpRequestBase AddInterestAddress(String username, String address) throws UnsupportedEncodingException {

		UserInfo userObj = new UserInfo();
		userObj.username = username;
		userObj.address = address;
		
		String json = new Gson().toJson(userObj);
		Log.i(TAG, "json: " + json);
		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/interest_address/add/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, HTTP.UTF_8);
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/**
	 * 관심지역 삭제
	 * @throws UnsupportedEncodingException 
	 * */
	public static HttpRequestBase RemoveInterestAddress(String username, String address) throws UnsupportedEncodingException {

		UserInfo userObj = new UserInfo();
		userObj.username = username;
		userObj.address = address;
		
		String json = new Gson().toJson(userObj);
		Log.i(TAG, "json: " + json);
		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/interest_address/delete/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, HTTP.UTF_8);
		httpPost.setEntity(entity);

		return httpPost;
	}
	
	/**
	 * 관심지역 조회
	 * @throws UnsupportedEncodingException 
	 * */
	public static HttpRequestBase SearchInterestAddress(String username) throws UnsupportedEncodingException {

		UserInfo userObj = new UserInfo();
		userObj.username = username;
		
		String json = new Gson().toJson(userObj);
		HttpPost httpPost = new HttpPost(KLTHttpClient.getBaseURL() + "/interest_address/");
		httpPost.setHeader("Content-Type", "application/json");
		StringEntity entity = new StringEntity(json, HTTP.UTF_8);
		httpPost.setEntity(entity);

		return httpPost;
	}
}
